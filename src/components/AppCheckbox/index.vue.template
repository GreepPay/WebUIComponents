<template>
  <div
    @click="selected ? (selected = false) : (selected = true)"
    class="flex w-full flex-row space-x-2 items-center cursor-pointer"
  >
    <app-icon
      v-if="variant == 'normal'"
      :name="`${selected ? 'checkbox-active' : 'checkbox'}`"
      :customClass="`h-[17px]`"
    />
    <app-icon
      v-if="variant == 'tick'"
      :name="`${selected ? 'tick-circle-active' : 'checkbox'}`"
      :customClass="`h-5`"
    />

    <app-icon
      v-if="variant == 'switch'"
      :name="`${selected ? 'switch-on' : 'switch-off'}`"
      :customClass="`!h-40`"
    />

    <div class="flex flex-row space-x-2 items-center select-none">
      <!-- @slot The content to display next to the checkbox. Use this slot to provide the label for the checkbox. -->
      <slot name="label">
        <app-normal-text
          customClass="!flex-1   "
          :class="
            selected
              ? '!text-black !font-medium !text-base'
              : '!text-very-light-gray'
          "
        >
          {{ label }}
        </app-normal-text>
      </slot>
    </div>
  </div>
</template>
<script lang="ts">
  import { ref, watch } from "vue"
  import AppIcon from "../AppIcon/index.vue"

  /**
   *  Checkbox component.
   */
  export default {
    components: {
      AppIcon,
    },
    name: "AppCheckbox",
    emits: ["update:modelValue"],
    props: {
      /**
       *  Value of the checkbox, use v-model to bind it.
       */
      modelValue: {
        type: Boolean,
        default: false,
      },
      label: {
        type: String,
        default: "",
      },
      variant: {
        type: String as () => "normal" | "switch" | "tick",
        default: "normal",
      },
    },
    setup(props: any, context: any) {
      const selected = ref(props.modelValue)

      watch(
        () => props.modelValue,
        (newValue) => {
          selected.value = newValue
        }
      )

      watch(selected, () => {
        context.emit("update:modelValue", selected.value)
      })

      return {
        selected,
      }
    },
  }
</script>
